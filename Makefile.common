# Makefile.common
#
# Copyright (C) 2012 Michel Pollet <buserror@gmail.com>
#

SHELL			= /bin/bash
INSTALL			?= install
CC				?= gcc
HOSTCC			= gcc
CFLAGS			?= -O0 -Wall
# stupid new warnings/errors
GCCV6 			:= $(shell expr `$(CC) -dumpversion | cut -f1 -d.` \>= 6)

ifeq ($(DIRTYCODE),)
CFLAGS			+= -Wno-error=unused-result -Wno-error=format
endif
ifeq "$(GCCV6)" "1"
#EXTRA_CFLAGS		+= -Wno-error=misleading-indentation
EXTRA_CFLAGS		+= -Wno-error=unused-variable
#EXTRA_CFLAGS		+= -Wno-error=unused-const-variable
EXTRA_CFLAGS		+= -Wno-unused-result -Wno-error=unused-result
endif

ifeq ($(MPTOOLS),)
MPTOOLS			:= ..
endif
IPATH			+= $(MPTOOLS)/include

O 				?= ..
PREFIX			?= /usr/local

ARCH			:= $(shell $(CC) -dumpmachine)
HOST			:= $(shell uname -m)
TOOLCHAIN		:= $(shell $(CC) --version|awk '/Debian|Ubuntu/ {print "debian";exit;}')
BUILDNAME		:= build-$(ARCH)
BUILD			:= $(O)/$(BUILDNAME)
OBJ				= $(BUILD)/obj/$(TARGET)
BIN				= $(BUILD)/bin
HOSTBIN			= $(BUILD)/host/bin
HOSTOBJ			= $(BUILD)/host/obj/$(TARGET)
LIB				= $(BUILD)/lib

DESTDIR			= $(O)/build-$(ARCH)

HOST_CFLAGS		:= -O2 -g

EXTRA_CFLAGS	+= -g -fPIC -std=gnu99
EXTRA_CFLAGS	+= -ffunction-sections -fdata-sections
EXTRA_CFLAGS	+= ${patsubst %,-I%,${subst :, ,${IPATH}}}
ifneq ($(VERSION),)
EXTRA_CFLAGS	+= -DVERSION="\"$(VERSION)\""
endif

# emcc/emscriten do not like this flag
ifneq ($(CC), emcc)
EXTRA_LDFLAGS	+= -Wl,--relax,--gc-sections
endif

ifeq ($(NOLTO), 1)
EXTRA_CFLAGS	+= -fno-lto
EXTRA_LDFLAGS	+= -fno-lto
else
#EXTRA_CFLAGS	+= -flto
#`EXTRA_LDFLAGS	+= -flto
endif

# if using the address sanitizer
ifeq ($(ASAN), 1)
EXTRA_CFLAGS	+=  -fsanitize=address -fno-omit-frame-pointer
EXTRA_LDFLAGS	+= -lasan
endif

ifeq ($(V),1)
Q 				:=
else
Q				:= @
endif
#
# This bit adds extra flags depending of the distro, and the
# architecture. To make sure debian packages have the right
# set of 'native' flags on them
#
ifeq ($(TOOLCHAIN),debian)
DEBARCH			:= $(shell dpkg-architecture -qDEB_BUILD_ARCH)

# If this include file was included from another project,
# add this library path to the link path too
ifneq ($(MPTOOLS),)
EXTRA_LDFLAGS	+= -L$(MPTOOLS)/$(BUILDNAME)/lib \
	-Wl,-rpath,${shell readlink -f $(MPTOOLS)/$(BUILDNAME)/lib}
endif
ifneq ($(SHARED),)
EXTRA_LDFLAGS	+= -L$(SHARED)/$(BUILDNAME)/lib \
	-Wl,-rpath,${shell readlink -f $(SHARED)/$(BUILDNAME)/lib}
endif

ifeq ($(DEBARCH),$(filter $(DEBARCH),amd64-i386))
EXTRA_CFLAGS	+= -march=native
endif
ifeq ($(DEBARCH),armhf)
EXTRA_CFLAGS	+=  -march=armv7-a -mtune=cortex-a8 -mfpu=neon
endif
EXTRA_LDFLAGS	+= -L$(LIB) -Wl,-rpath,${shell readlink -f ${LIB}}
else
# not debian
ifneq ($(CC), emcc)
EXTRA_LDFLAGS	+= -L$(LIB) -Wl,-rpath-link,$(LIB)
endif
endif


all: ${OBJ}

#
# Generic rules
#
$(OBJ) $(BIN) $(LIB) $(HOSTOBJ) $(HOSTBIN):
	+$(Q)echo "  MKDIR" $@ && mkdir -p $@

$(LIB)/%.a : | $(LIB)
	$(Q)echo "  LIB   ${@}" && \
	$(AR) cr $@ $^ \
		|| echo Error: $(AR) cru $@ $^

.SECONDARY:

$(OBJ)/%.o: %.c | $(OBJ)
	$(Q)echo "  CC" ${filter -O%, ${EXTRA_CFLAGS} $(CFLAGS) ${CFLAGS_TARGET}} "${<}" && \
	${CC} -MMD ${EXTRA_CFLAGS} ${CPPFLAGS} ${CFLAGS} ${CFLAGS_TARGET} -c -o ${@} ${<} \
		|| echo Error: ${CC} -MD ${EXTRA_CFLAGS} ${CPPFLAGS} ${CFLAGS} ${CFLAGS_TARGET} -c -o ${@} ${<}

$(BIN)/%: $(OBJ)/%.o | $(BIN)
	$(Q)echo "  LD    ${*}" && \
	${CC} -o ${@} $(filter %.o %.a,$^) \
		${EXTRA_LDFLAGS} ${BASE_LDFLAGS} ${LDFLAGS_TARGET} ${LDFLAGS} ${LIBS_${*}} \
		|| echo Error: ${CC} -o $(filter %.o %.a,$^) \
			${EXTRA_LDFLAGS} ${BASE_LDFLAGS} ${LDFLAGS_TARGET} ${LDFLAGS} ${LIBS_${*}}

$(LIB)/%.so.$(SOV) $(LIB)/%.so.$(VERSION).$(SOV) $(LIB)/%.so: | $(LIB)
	$(Q)echo "  LDSO $@" && \
	{ \
		naked=${shell basename ${basename $@}}; \
		${CC} -shared -Wl,-soname,$$naked.$(SOV) \
			-o $(LIB)/$$naked.$(VERSION).$(SOV) \
			$(filter %.o %.a,$^) \
			${EXTRA_LDFLAGS} ${BASE_LDFLAGS} ${LDFLAGS} && \
		ln -sf $$naked.$(VERSION).$(SOV) ${LIB}/$$naked.$(SOV) && \
		ln -sf $$naked.$(SOV) ${LIB}/$$naked ; \
	} || echo ERROR: $@ -- relaunch with V=1

$(HOSTOBJ)/%.o: %.c | $(HOSTOBJ)
	$(Q)echo "  HOSTCC    ${<}" && \
	${HOSTCC} -MMD ${HOST_CFLAGS} ${EXTRA_CFLAGS} -c -o ${@} ${<} \
		|| echo Error: ${CC} -MMD ${HOST_CFLAGS} ${EXTRA_CFLAGS} -c -o ${@} ${<}


$(HOSTBIN)/%: $(HOSTOBJ)/%.o | $(HOSTBIN)
	$(Q)echo "  HOSTLD    ${*}" && \
	${HOSTCC} -o ${@} $(filter %.o %.a,$^) \
		${EXTRA_LDFLAGS} ${HOST_LDFLAGS} ${LIBS_${*}} \
		|| echo Error: ${HOSTCC} -o ${@} $(filter %.o %.a,$^) \
			${HOST_LDFLAGS} ${LIBS_${*}}

clean::
	rm -rf $(OBJ) $(HOSTOBJ) $(BIN)/$(TARGET)

# Include autogenerated dependencies
-include ${wildcard $(OBJ)/*.d}
-include ${wildcard $(HOSTOBJ)/*.d}
